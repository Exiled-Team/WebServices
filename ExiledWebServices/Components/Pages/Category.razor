@page "/{Name}"
@layout MainLayout
@using ExiledWebServices.Components.Core
@using ExiledWebServices.Components.Layout
@using ExiledWebServices.Deployment

@code {
    [Parameter]
    public string Name { get; set; }
    
    public IArticlesConfig<DocumentationCard> Config { get; set; }
    
    
    public List<DocumentationCard> Categories => Config.Articles;
    
    protected override void OnInitialized()
    {
        Config = Loader.GetConfig<IConfig>(Name) as IArticlesConfig<DocumentationCard>;
    }
}

@if (Config is not null)
{
    <AdditiveHead Title="Exiled" Description="Exiled Framework">
    <ChildContent>
        <link rel="stylesheet" href="assets/css/docs.css"/>
    </ChildContent>
</AdditiveHead>

<body>

<div style="height: 15vh"></div>

<section class="section docs" aria-label="docs">
    <div class="container">

        <h2 class="headline headline-2 section-title">
            <span class="span">@Config.TitleSpan</span> @Config.Title
        </h2>

        <p class="section-text">
            @Config.Subtitle
        </p>

        <div class="docs-flex">
            @{
                string prefix = Config.IsCategory ? "/" : "/Article/";
            }
            @foreach (DocumentationCard card in Categories)
            {
                int id = card.GetHashCode();
                string href = string.IsNullOrEmpty(@card.Href) ? prefix + card.Name : prefix + card.Href;
                <div class="card docs-card extended" data-arrow="@id">

                    <div class="card-content">

                        <div class="card-wrapper">
                            <div class="card-tag">
                                @if (@card.Tags is not null)
                                {
                                    @foreach (SerializableIcon tag in @card.Tags)
                                    {
                                        if (string.IsNullOrEmpty(tag.Class))
                                            continue;

                                        string hashedName = tag.Class[0] == '#' ? tag.Class : $"#{tag.Class}";

                                        <a href="@tag.Href" class="span hover-2">@hashedName</a>
                                    }
                                }
                            </div>
                        </div>

                        <h3 class="headline headline-3">
                            <a href="@href" class="card-title hover-2 icon-label">
                                @if (!string.IsNullOrEmpty(@card.Icon.Class))
                                {
                                    <ion-icon name="@card.Icon.Class"></ion-icon>
                                }

                                <span>@card.Title.EncodedText</span>
                            </a>
                        </h3>

                        <p class="card-subtitle">@card.Subtitle.EncodedText</p>

                        <div class="card-wrapper">
                            <a href="@href" class="card-btn icon-label">
                                <span class="span">Browse docs</span>
                                <ion-icon name="arrow-forward-outline" class="arrow-ptr arrow-ptr-right" data-arrow-id="@id"></ion-icon>
                            </a>
                        </div>

                    </div>

                </div>
            }
        </div>

    </div>

    <img src="./assets/images/background/shadow-3.svg" width="500" height="1500" loading="lazy" alt="" class="docs-bg">

</section>

<br/>

<section>

</section>

</body>
}
